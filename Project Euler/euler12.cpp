 /*
The sequence of triangle numbers is generated by adding the natural numbers.

So the 7th triangle number would be: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

long nTriangleNumber(int);
int numberOfDivisors(long);

int main()
{
    int current = 1;
    int temp;
    long i = 1;

    while (numberOfDivisors(current) < 500)
    {
        current = nTriangleNumber(i);
        cout << "i: " << i << ", triangle number: " << current << ", number of divisors: " << numberOfDivisors(current) << endl;
        i++;
    }

    cout << "Found! The number is: " << current;

    return 0;
}

long nTriangleNumber(int n)
{
    int nTrianbleNumber = 0;
    for (int i = 1; i <= n; i++)
    nTrianbleNumber += i;

    return nTrianbleNumber;
}

int numberOfDivisors(long number)
{
    int divisors = 1;

    for (int i = 1; i <= round(sqrt(number)); i++)
    {
        if (number % i == 0) divisors++;
    }

    return divisors;
}